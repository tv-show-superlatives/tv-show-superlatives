{"version":3,"sources":["firebase.js","TvShowDetails.js","GeneralSearch.js","AddListToFirebase.js","StoreState.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","TvShowDetails","state","tv","axios","url","this","props","match","params","tvShowsID","method","then","response","data","officialDescription","summary","replace","genreName","genres","officialRating","rating","average","officialNetwork","network","name","officialCountry","country","officialImage","image","medium","setState","className","src","alt","to","Component","GeneralSearch","shuffle","a","i","length","j","Math","floor","random","sortedTV","topTen","comedyTen","hboShows","nbcShows","shuffleTV","page","language","console","log","map","show","sort","b","reverse","slice","filter","key","id","externals","tvrage","title","path","component","AddListToFirebase","removeShow","tvShows","userInput","list","info","onClick","shows","prevListCopy","dataToPush","dbRef","database","ref","child","on","prevList","val","push","update","StoreState","addNewList","newList","owner","addListToFirebase","handleChange","e","target","value","handleFormSubmit","preventDefault","action","onSubmit","htmlFor","type","onChange","placeholder","handleClick","App","addTvShow","newState","listInfo","keys","basename","exact","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4cced270.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBb-jxZSNnD8SAtk2Iya1XGO61J7mA38Bg\",\n    authDomain: \"tv-show-superlatives-database.firebaseapp.com\",\n    databaseURL: \"https://tv-show-superlatives-database.firebaseio.com\",\n    projectId: \"tv-show-superlatives-database\",\n    storageBucket: \"tv-show-superlatives-database.appspot.com\",\n    messagingSenderId: \"1029143500760\",\n    appId: \"1:1029143500760:web:b168a46fad4f73e49a44ad\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport {\n\tBrowserRouter as Router,\n\tRoute,\n\tLink,\n\tNavLink\n} from \"react-router-dom\";\n\n\nclass TvShowDetails extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\ttv: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\taxios({\n\t\t\turl: `https://api.tvmaze.com/lookup/shows?tvrage=${this.props.match.params.tvShowsID}`,\n\t\t\tmethod: \"GET\"\n\t\t}).then(response => {\n\t\t\tconst tv = response.data;\n\t\t\tconst regex = /(<([^>]+)>)/gi;\n\t\t\tconst officialDescription = response.data.summary.replace(regex, \"\");\n\t\t\tconst genreName = response.data.genres[0];\n\t\t\tconst officialRating = response.data.rating.average;\n\t\t\tconst officialNetwork = response.data.network.name;\n\t\t\tconst officialCountry = response.data.network.country.name;\n\t\t\tconst officialImage = response.data.image.medium;\n\n\t\t\tthis.setState({\n\t\t\t\ttv: tv,\n\t\t\t\tofficialDescription: officialDescription,\n\t\t\t\tgenreName: genreName,\n\t\t\t\tofficialRating: officialRating,\n\t\t\t\tofficialNetwork: officialNetwork,\n\t\t\t\tofficialCountry: officialCountry,\n\t\t\t\tofficialImage: officialImage,\n\t\t\t});\n\t\t});\n\t}\n\n\t\n\t// /when component is true, show title, image, description, rating, network, country, genre, close button\n\trender() {\n\t\tif (\n\t\t\tthis.state.officialNetwork === \"\" ||\n\t\t\tthis.state.officialCountry === \"\"\n\t\t) {\n\t\t\treturn (\n\t\t\t\t<div className=\"single-show\">\n\t\t\t\t\t<h1>{this.state.tv.name}</h1>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={this.state.officialImage}\n\t\t\t\t\t\talt={`A poster of ${this.state.tv.name}`}\n\t\t\t\t\t/>\n\t\t\t\t\t<p>Description: {this.state.officialDescription}</p>\n\t\t\t\t\t<p>Rating: {this.state.officialRating}/10</p>\n\t\t\t\t\t<p>Network unknown</p>\n\t\t\t\t\t<p>Country unknown</p>\n\t\t\t\t\t<p>Genre: {this.state.genreName}</p>\n\t\t\t\t\t<button>\n\t\t\t\t\t\t<Link to=\"/GeneralSearch/\">Close Window</Link>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"single-show\">\n\t\t\t\t\t\t<h1>{this.state.tv.name}</h1>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={this.state.officialImage}\n\t\t\t\t\t\t\talt={`A poster of ${this.state.tv.name}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<p>Description: {this.state.officialDescription}</p>\n\t\t\t\t\t\t<p>Rating: {this.state.officialRating}/10</p>\n\t\t\t\t\t\t<p>Network: {this.state.officialNetwork}</p>\n\t\t\t\t\t\t<p>Country: {this.state.officialCountry}</p>\n\t\t\t\t\t\t<p>Genre: {this.state.genreName}</p>\n\t\t\t\t\t\t<button>\n\t\t\t\t\t\t\t<Link to=\"/GeneralSearch/\">Close Window</Link>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t}\n}\n\t\t\nexport default TvShowDetails;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport TvShowDetails from './TvShowDetails';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\n\nclass GeneralSearch extends Component {\n    constructor(){\n        super();\n        this.state = {\n            tv: [],\n            sortedTV: [],\n            topTen: [],\n            comedyTen: [],\n            hboShows: [],\n            nbcShows: [],\n            shuffleTV: [],\n        }\n    }\n    shuffle = (a) => {\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n        }\n        return a;\n    }\n    /////USER SEARCH FUNCTION \n    // array = [\n    //     { name:\"string 1\", value:\"this\", other: \"that\" },\n    //     { name:\"string 2\", value:\"this\", other: \"that\" }\n    // ];\n    // search = (nameKey, myArray) => {\n    //     for (let i = 0; i < tv.length; i++) {\n    //         if (myArray[i].name === nameKey) {\n    //             return myArray[i];\n    //         }\n    //     }\n    // }\n\n//  resultObject = search(\"string 1\", array);\n\n    componentDidMount() { \n        axios({\n            url: `http://api.tvmaze.com/shows?`,\n            method: 'GET',\n            params: {\n                page: 'X',\n                language: 'English',\n            }\n        }).then(response => {\n            const tv = response.data;\n            this.setState({\n            tv: tv,\n        })\n            console.log(tv)\n            const avgRating = this.state.tv.map(show => {\n                return show.rating.average\n            })\n            const network = this.state.tv.map(show => {\n                if (show.network === null) {\n                    return false\n                } else {\n                    return show.network.name\n                }\n            })            \n            const tvShowImage = this.state.tv.map(show => {\n                if (show.image.medium === null) {\n                    console.log('error handling')\n                } else {\n                    return show.image.medium\n                }\n            })\n            const sortedTV = tv.sort(function(a, b) {\n                if (a.rating.average === null) {\n                    return false\n                } else {\n                    return a.rating.average - b.rating.average;\n                }\n            });\n            const topTen = sortedTV.reverse().slice(0,10);\n            this.setState({\n                topTen: topTen,\n            })\n            const comedyTen = sortedTV.filter(show => {\n                if (show.genres[0] === null) {\n                    return false \n                } else if (show.genres[0] === \"Comedy\") {\n                    return show.genres[0]\n                }\n            }).slice(0,10)\n            this.setState({\n                comedyTen: comedyTen,\n            })\n            const hboShows = sortedTV.filter(show => {\n                if (show.network === null) {\n                    return false\n                } else if (show.network.name === \"HBO\") {\n                    return show.network.name\n                }\n            }).slice(0,10)\n            this.setState({\n                hboShows: hboShows,\n            });\n            const nbcShows = sortedTV.filter(show => {\n                if (show.network === null) {\n                    return false\n                } else if (show.network.name === \"NBC\") {\n                    return show.network.name\n                }\n            }).slice(0,10);\n            this.setState({\n                nbcShows: nbcShows,\n            });\n            const shuffleTV = this.shuffle(tv).reverse().slice(0,10);\n            this.setState({\n                shuffleTV: shuffleTV,\n            })\n            \n        })\n    }\n    render() {\n        \n        return (\n            \n            <div className=\"tv-catalogue\">\n                \n                {/* <form action=\"\">\n                    <input type=\"text\" placeholder=\"Search..\"></input>\n                    <button onClick={searchFunc}>SEARCH!</button>\n                </form> */}\n\n\n                <h2>Best Rated Shows on TV</h2>\n                {this.state.topTen.map(show => {\n                return (\n                    <div key={show.id} className=\"tv-titles tv-poster\">\n                        <Link to={`/tvShows/${show.externals.tvrage}`}>\n                        <img src={`${show.image.medium}`} title={`${show.name}`} alt={`${show.name}`}/>\n                        </Link>\n                        <Router>\n                        <Route path=\"/tvShow/:tvShowID\" component={TvShowDetails}/>\n                        </Router>\n                    </div>\n                )\n            })}\n            <h2>HBO</h2>\n                    {this.state.hboShows.map(show => {\n                    return (\n                        <div key={show.id} className=\"tv-titles tv-poster\">\n                            <Link to={`/tvShows/${show.externals.tvrage}`}>\n                            <img src={`${show.image.medium}`} title={`${show.name}`} alt={`${show.name}`}/>\n                            </Link>\n                            <Router>\n                            <Route path=\"/tvShow/:tvShowID\" component={TvShowDetails}/>\n                            </Router>\n                    </div>\n                )\n            })}\n            <h2>Comedy</h2>\n                    {this.state.comedyTen.map(show => {\n                    return (\n                        <div key={show.id} className=\"tv-titles tv-poster\">\n                            <Link to={`/tvShows/${show.externals.tvrage}`}>\n                            <img src={`${show.image.medium}`} title={`${show.name}`} alt={`${show.name}`}/>\n                            </Link>\n                            <Router>\n                            <Route path=\"/tvShow/:tvShowID\" component={TvShowDetails}/>\n                            </Router>\n                    </div>\n                )\n            })}\n            <h2>NBC</h2>\n                    {this.state.nbcShows.map(show => {\n                    return (\n                        \n                        <div key={show.id} className=\"tv-titles tv-poster\">\n                            \n                            <Link to={`/tvShows/${show.externals.tvrage}`}>\n                            <img src={`${show.image.medium}`} title={`${show.name}`} alt={`${show.name}`}/>\n                            </Link>\n                            <Router>\n                            <Route path=\"/tvShow/:tvShowID\" component={TvShowDetails}/>\n                            </Router>\n                    </div>\n                )\n            })}\n            <h2>TV Show Roulette!</h2>\n                    {this.state.shuffleTV.map(show => {\n                    return (\n                        \n                        <div key={show.id} className=\"tv-titles tv-poster\">\n                            \n                            <Link to={`/tvShows/${show.externals.tvrage}`}>\n                            <img src={`${show.image.medium}`} title={`${show.name}`} alt={`${show.name}`}/>\n                            </Link>\n                            <Router>\n                            <Route path=\"/tvShow/:tvShowID\" component={TvShowDetails}/>\n                            </Router>\n                    </div>\n                )\n            })}\n        </div>\n        )\n    }\n}\nexport default GeneralSearch;\n  ","import React, { Component } from 'react';\r\nimport firebase from \"./firebase\"\r\n\r\nclass AddListToFirebase extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      tvShows:[],\r\n      userInput:''\r\n    }\r\n  }\r\n\r\n  removeShow = () => {\r\n\r\n  }\r\n    \r\n    render() {\r\n        return(\r\n          <div>\r\n            <div>\r\n            {/* <button className=\"badButton\">add list</button> */}\r\n          </div>\r\n            {\r\n              this.props.tvShows.reverse().map(list => {\r\n                return (\r\n                  <ul key={list.key}>{list.info.name}\r\n                  \r\n                  <button onClick=\"\"></button>\r\n\r\n                  {\r\n                    list.info.shows.map(show => {\r\n                      return <li key={show.id}>\r\n                        {show.name}\r\n                        <button onClick={this.removeShow}>remove</button>\r\n                        </li>\r\n                    })\r\n                  }\r\n                  <button onClick={() => {\r\n\r\n                    const key = list.key\r\n                    const dataToPush = {\r\n                      id: 1235,\r\n                      name: 'bhlegnl?'\r\n                    }\r\n                    let prevListCopy;\r\n                    const dbRef = firebase.database().ref().child(key + '/shows')\r\n\r\n                    dbRef.on('value', response => {\r\n                      const prevList = response.val();\r\n                      prevListCopy = [...prevList];\r\n                      prevListCopy.push(dataToPush);\r\n                    })\r\n                    \r\n                    dbRef.update(prevListCopy);\r\n                    \r\n\r\n                    }}>add to tv show</button>\r\n                </ul>\r\n                )\r\n              })\r\n            }\r\n\r\n          </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddListToFirebase","import React, { Component } from 'react';\nimport firebase from './firebase'\nimport './App.css';\nimport AddListToFirebase from './AddListToFirebase';\n\n\n\nclass StoreState extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            tvShows:[],\n            userInput:'',\n        }\n        \n    }\n\n    addNewList = (userInput) => {\n        const newList = {\n            owner: '',\n            name: userInput,\n            shows: [\n                {\n                    id:12,\n                    name:\"l\"\n                }\n            ]\n        };\n\n        const dbRef = firebase.database().ref();\n        dbRef.push(newList)\n    }\n    \n    addListToFirebase = (props) =>{\n        console.log(this.state.userInput)\n        //     return (\n        //         props.tvShows,\n        //         props.dummyData  //also tried props.dummy=this.props.dummyData  \n        // )\n    }\n\n    // search(term) {\n    //     this.setState({ term });\n    // }\n    \n\n    handleChange = (e) => {\n        this.setState({userInput:e.target.value})\n        // console.log(e.target.value)\n        \n    }\n    \n    \n\n    handleFormSubmit = (e) => {\n        e.preventDefault();\n        this.addListToFirebase(this.state.userInput)\n        // console.log(this.handleFormSubmit, \"hello\")\n        const userInput = this.state.userInput\n        this.addNewList(userInput)\n        this.setState({\n            userInput:'',\n            // tvShows:[]\n        })\n    }\n\n    // componentDidMount() {\n    //     const dbRef=firebase.database().ref();\n    //     dbRef.on('value', (response) => {\n    //         console.log(response.val())\n    //     })\n    // }  \n    \n\n    // handleClick=(e)=>{\n    //     e.preventDefault();\n    //     // const dbRef = firebase.database().ref();\n    //     // dbRef.push(this.state.userInput);\n    //     this.setState({userInput:''})\n    //     console.log(\"clicked\")\n    // }\n\n        \n    render() {\n        // console.log(this.state.userInput)\n        return (\n            <div>\n                <form \n                className=\"searchForm\" action=\"submit\" onSubmit={this.handleFormSubmit}>\n                    <label htmlFor=\"showSearch\">Search for what you want to watch </label>\n                    <input\n                        className=\"searchBar\"\n                        type=\"text\"\n                        id=\"showSearch\"\n                        onChange={this.handleChange}\n                        value={this.state.userInput}\n                        placeholder = 'ie. Larry David/ Comedy / HBO'\n                    />\n                    <button type=\"submit\" onClick={this.handleClick}>Search</button>\n                    {/* <AddListToFirebase \n                        type=\"submit\" \n                        onClick={this.handleClick}\n                        tvShows={this.state.tvShows}\n                        // dummyData={this.state.dummyData}\n                        addNewList={this.addNewList}\n                        onSubmit={this.handleFormSubmit}/> */}\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default StoreState;","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from './firebase';\nimport TvShowDetails from './TvShowDetails';\nimport GeneralSearch from './GeneralSearch';\nimport StoreState from './StoreState';\nimport { BrowserRouter as Router, Route, Link, NavLink } from 'react-router-dom';\nimport AddListToFirebase from './AddListToFirebase'\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state={\n      tvShows:[],\n      userInput:'',\n      list: [],\n    }\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', response => {\n      const newState = [];\n      const newList = [];\n      const data = response.val();\n\n\n      for (let key in data) {\n        const listInfo = {\n          key: key,\n          info: data[key]\n        }\n        const keys = key\n        const listArray = data[key]\n        newState.push(listInfo)\n        newList.push(keys)\n        // console.log(data.key)\n        this.setState({\n          tvShows: newState,\n          list: newList\n        })\n      }\n    })\n  }\n\n  // dummyData = () => {\n  //   const dummyData = {\n  //     owner: 'celeste',\n  //     name: 'woohoo lists!!',\n  //     shows: [\n  //       {\n  //         name: 'the best show',\n  //         id: 10,\n  //       },\n  //       {\n  //         name: 'a lesser show',\n  //         id: 24,\n  //       },\n  //       {\n  //         name: 'a different show',\n  //         id: 135,\n  //       }\n  //     ]\n  //   };\n\n    \n  handleClick = (e) => {\n    e.preventDefault();\n    // const dbRef = firebase.database().ref();\n    // dbRef.push(this.state.userInput);\n    this.setState({ userInput: '' })\n    console.log(\"clicked\")\n  }\n  //   const dbRef = firebase.database().ref();\n  //   dbRef.push(dummyData);\n  // };\n\n    // addNewList = (userInput) => {\n  //   const newList = {\n  //     owner: '',\n  //     name: userInput,\n  //     shows: []\n  //   };\n\n  //   const dbRef = firebase.database().ref();\n  //   dbRef.push(newList)\n  // }\n  \n  addTvShow = (e) => {\n    e.preventDefault()\n    const addTvShow = {\n      shows: [\n        {\n          name: 'a new show?',\n          id: 302\n        }\n      ]\n    };\n\n\n    const dbRef = firebase.database().ref();\n    // console.log(this)\n    // console.log(dbRef.val)\n    // dbRef.push(addTvShow)\n  };\n\n  render() {\n    return (\n      <Router basename=\"/tv-show-superlatives/\" >\n        <div className=\"App\">\n          <h1>Welcome</h1>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/GeneralSearch/\">General Search</Link>\n          <Route path=\"/GeneralSearch/\" component={GeneralSearch}/>\n          <Link to=\"/StoreState/\">Store State</Link>\n          <Route path=\"/StoreState/\" component={StoreState}/>\n          <Link to=\"/TvShowDetails/\">TV Show Details</Link>\n          <Route path=\"/tvShows/:tvShowsID\" component={TvShowDetails}/>\n          <Route path=\"/\" exact \n            render={ () => \n            <AddListToFirebase\n              handleClick={this.handleClick}\n              tvShows={this.state.tvShows} \n              list={this.state.list}\n              // dummyData={this.dummyData} \n              addTvShow={this.addTvShow}\n              addNewList={this.addNewList}\n            />\n            }/>\n          \n\n        </div>\n      </Router>\n\n\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}